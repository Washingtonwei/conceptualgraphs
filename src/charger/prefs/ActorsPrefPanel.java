/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package charger.prefs;

import charger.Global;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.File;
import javax.swing.BorderFactory;
import javax.swing.border.TitledBorder;

/**
 *
 * @author hsd
 */
public class ActorsPrefPanel extends javax.swing.JPanel {

    /**
     * Creates new form ActionPrefPanel
     */
    public ActorsPrefPanel() {
        initComponents();
        animationDelayLabel.setText( "Animation delay: " + animationDelay.getValue() + " milliseconds" );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DatabaseFolderField = new javax.swing.JTextField();
        setDatabaseFolder = new javax.swing.JButton();
        allowActorLinksAcrossContexts = new javax.swing.JCheckBox();
        allowNullActorArguments = new javax.swing.JCheckBox();
        enableActors = new javax.swing.JCheckBox();
        enableCopyCorefs = new javax.swing.JCheckBox();
        actorAnimation = new javax.swing.JCheckBox();
        animationDelayLabel = new javax.swing.JLabel();
        animationDelay = new javax.swing.JSlider();
        use_1_0_actors = new javax.swing.JCheckBox();

        setBackground(new Color(255, 255, 255));
        setToolTipText("Whether to allow null referents to actors or treat them as errors");

        DatabaseFolderField.setText(Global.DatabaseFolder);
        DatabaseFolderField.setToolTipText("Folder where database files (tab-separated text tables) are looked for");
        DatabaseFolderField.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
            "Database Folder", TitledBorder.LEFT,
            TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));
    DatabaseFolderField.setCaretPosition(0);
    DatabaseFolderField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            DatabaseFolderFieldActionPerformed(evt);
        }
    });

    setDatabaseFolder.setText("Browse...");
    setDatabaseFolder.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            setDatabaseFolderActionPerformed(evt);
        }
    });

    allowActorLinksAcrossContexts.setBackground(new Color(255, 255, 255));
    allowActorLinksAcrossContexts.setSelected(Global.allowActorLinksAcrossContexts);
    allowActorLinksAcrossContexts.setText("Allow actor links across contexts");
    allowActorLinksAcrossContexts.setToolTipText("Whether to allow links to/from actors regardless of context nesting");
    allowActorLinksAcrossContexts.setOpaque(true);
    allowActorLinksAcrossContexts.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            allowActorLinksAcrossContextsItemStateChanged(evt);
        }
    });

    allowNullActorArguments.setBackground(new Color(255, 255, 255));
    allowNullActorArguments.setSelected(Global.AllowNullActorArguments);
    allowNullActorArguments.setText("Allow null actor arguments");
    allowNullActorArguments.setToolTipText("Whether to ignore null arguments or flag an error");
    allowNullActorArguments.setOpaque(true);
    allowNullActorArguments.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            allowNullActorArgumentsItemStateChanged(evt);
        }
    });

    enableActors.setBackground(new Color(255, 255, 255));
    enableActors.setSelected(Global.enableActors);
    enableActors.setText("Enable actors from now on");
    enableActors.setToolTipText("Whether to enable all actors (affects only future changes)");
    enableActors.setOpaque(true);
    enableActors.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            enableActorsItemStateChanged(evt);
        }
    });

    enableCopyCorefs.setBackground(new Color(255, 255, 255));
    enableCopyCorefs.setSelected(Global.enableCopyCorefs);
    enableCopyCorefs.setText("Copy coreferents from now on");
    enableCopyCorefs.setToolTipText("Whether to copy changed coreferents (affects only future changes)");
    enableCopyCorefs.setOpaque(true);
    enableCopyCorefs.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            enableCopyCorefsItemStateChanged(evt);
        }
    });

    actorAnimation.setBackground(new Color(255, 255, 255));
    actorAnimation.setSelected(Global.ActorAnimation);
    actorAnimation.setText("Animate actor activation");
    actorAnimation.setToolTipText("Show actor activations as they are performed");
    actorAnimation.setOpaque(true);
    actorAnimation.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            actorAnimationItemStateChanged(evt);
        }
    });

    animationDelayLabel.setText("Animation delay: " + animationDelay.getValue() + " milliseconds");
    animationDelayLabel.setToolTipText("Interval between actor clicks (milliseconds)");

    animationDelay.setBackground(new Color(255, 255, 255));
    animationDelay.setMajorTickSpacing(1000);
    animationDelay.setMaximum(3000);
    animationDelay.setMinorTickSpacing(200);
    animationDelay.setPaintLabels(true);
    animationDelay.setPaintTicks(true);
    animationDelay.setSnapToTicks(true);
    animationDelay.setToolTipText("Interval between actor clicks (millseconds)");
    animationDelay.setValue(Global.AnimationDelay);
    animationDelay.setOpaque(true);
    animationDelay.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            animationDelayStateChanged(evt);
        }
    });

    use_1_0_actors.setBackground(new Color(255, 255, 255));
    use_1_0_actors.setSelected(Global.use_1_0_actors);
    use_1_0_actors.setText("Enable 1_0 actors (requires restart)");
    use_1_0_actors.setToolTipText("Whether to enable 1_0 actors (e.g., <equals_1_0>)");
    use_1_0_actors.setOpaque(true);
    use_1_0_actors.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            use_1_0_actorsItemStateChanged(evt);
        }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(19, 19, 19)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(enableActors)
                    .add(allowNullActorArguments)
                    .add(allowActorLinksAcrossContexts)
                    .add(layout.createSequentialGroup()
                        .add(DatabaseFolderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 587, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(setDatabaseFolder))
                    .add(layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(enableCopyCorefs))
                    .add(use_1_0_actors))
                .add(layout.createSequentialGroup()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(actorAnimation)
                        .add(animationDelay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 255, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(layout.createSequentialGroup()
                            .add(10, 10, 10)
                            .add(animationDelayLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 233, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(435, 435, 435)))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(32, 32, 32)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(DatabaseFolderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(setDatabaseFolder))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(allowActorLinksAcrossContexts)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(allowNullActorArguments)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(enableActors)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(enableCopyCorefs)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(use_1_0_actors)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 38, Short.MAX_VALUE)
            .add(actorAnimation)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(animationDelayLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(animationDelay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(63, 63, 63))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void setDatabaseFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDatabaseFolderActionPerformed
        Global.queryForDatabaseFolder( null );
        DatabaseFolderField.setText( Global.DatabaseFolderFile.getAbsolutePath() );
    }//GEN-LAST:event_setDatabaseFolderActionPerformed

    private void DatabaseFolderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatabaseFolderFieldActionPerformed
                Global.DatabaseFolder = DatabaseFolderField.getText();
                Global.DatabaseFolderFile = new File( Global.DatabaseFolder );
    }//GEN-LAST:event_DatabaseFolderFieldActionPerformed

    private void allowActorLinksAcrossContextsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_allowActorLinksAcrossContextsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.allowActorLinksAcrossContexts = true;
        } else {
            Global.allowActorLinksAcrossContexts = false;
        }
    }//GEN-LAST:event_allowActorLinksAcrossContextsItemStateChanged

    private void allowNullActorArgumentsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_allowNullActorArgumentsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.AllowNullActorArguments = true;
        } else {
            Global.AllowNullActorArguments = false;
        }
    }//GEN-LAST:event_allowNullActorArgumentsItemStateChanged

    private void enableActorsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_enableActorsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.enableActors = true;
            // need to iterate through all windows and start all their actors - use startupAllActors()
            charger.act.GraphUpdater.startupAllActors();
        } else {
            Global.enableActors = false;
            enableCopyCorefs.setSelected( false );  // suggest don't bother with corefs if actors are disabled
            // user can still override
            // for each window, shutdown all actors
            charger.act.GraphUpdater.shutdownAllActors();
        }
        animationDelay.setVisible( Global.enableActors );
        animationDelayLabel.setVisible( Global.enableActors );
        actorAnimation.setVisible( Global.enableActors );
    }//GEN-LAST:event_enableActorsItemStateChanged

    private void enableCopyCorefsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_enableCopyCorefsItemStateChanged
                if ( evt.getStateChange() == ItemEvent.SELECTED ) {
                    Global.enableCopyCorefs = true;
                } else {
                    Global.enableCopyCorefs = false;
                }
    }//GEN-LAST:event_enableCopyCorefsItemStateChanged

    private void animationDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_animationDelayStateChanged
        animationDelayLabel.setText( "Animation delay: " + animationDelay.getValue() + " milliseconds" );
        Global.AnimationDelay = animationDelay.getValue();
    }//GEN-LAST:event_animationDelayStateChanged

    private void use_1_0_actorsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_use_1_0_actorsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.use_1_0_actors = true;
        } else {
            Global.use_1_0_actors = false;
        }
    }//GEN-LAST:event_use_1_0_actorsItemStateChanged

    private void actorAnimationItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_actorAnimationItemStateChanged
        // 		@bug when ExportCharGerInfo is changed, all nodes must be updated (what a pain!)
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.ActorAnimation = true;
        } else {
            Global.ActorAnimation = false;
        }
        animationDelay.setEnabled( Global.ActorAnimation );
        animationDelayLabel.setEnabled( Global.ActorAnimation );
    }//GEN-LAST:event_actorAnimationItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField DatabaseFolderField;
    public javax.swing.JCheckBox actorAnimation;
    public javax.swing.JCheckBox allowActorLinksAcrossContexts;
    public javax.swing.JCheckBox allowNullActorArguments;
    public javax.swing.JSlider animationDelay;
    private javax.swing.JLabel animationDelayLabel;
    public javax.swing.JCheckBox enableActors;
    public javax.swing.JCheckBox enableCopyCorefs;
    private javax.swing.JButton setDatabaseFolder;
    public javax.swing.JCheckBox use_1_0_actors;
    // End of variables declaration//GEN-END:variables
}
