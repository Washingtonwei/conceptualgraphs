/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package charger.prefs;

import charger.Global;
import charger.obj.Graph;
import charger.obj.GraphObject;
import charger.util.FontChooser;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import javax.swing.BorderFactory;
import javax.swing.border.TitledBorder;
import org.jdesktop.layout.GroupLayout;

/**
 * One of the preference panels. In order to make use of other classes as embedded panels,
 * this class has "place holder" panels, which are easy to replace with the real ones.
 * Adding a new component to a GroupLayout is very tricky, but replacing an existing one is easy.
 * See the constructor for the details.
 * @author hsd
 */
public class AppearancePrefPanel extends javax.swing.JPanel {

    ColorPreviewPanel colorPanel = null;
    FontPrefPanel fontPanel = null;
    PreferencesFrame parent = null;

    /**
     * Creates new form AppearancePrefPanel
     */
    public AppearancePrefPanel( PreferencesFrame parent ) {
        this.parent = parent;
        initComponents();
        GroupLayout layout = (GroupLayout)getLayout();

        colorPanel = new ColorPreviewPanel( parent );
        colorPanel.setTitle( "Current default colors" );
        layout.replace( colorPlaceholderPanel, colorPanel );

//        colorPanel.addActionListener

        fontPanel = new FontPrefPanel( parent );
        layout.replace( fontPlaceholderPanel, fontPanel );

        revalidate();

    }

    public PreferencesFrame getParentFrame() {
        return parent;
    }

    public FontChooser getFontChooser() {
        return fontPanel.getFontChooser();
    }

    public void actionPerformed( ActionEvent evt ) {
        colorPanel.refreshSampleObject();
    }
    
    private void restoreEdgeFactoryDefaults() {
        arrowHeadWidth.setText( Global.factoryEdgeAttributes.getArrowHeadWidth() + "");
        Global.userEdgeAttributes.setArrowHeadWidth( Global.factoryEdgeAttributes.getArrowHeadWidth());
        arrowHeadHeight.setText( Global.factoryEdgeAttributes.getArrowHeadHeight() + "");
        Global.userEdgeAttributes.setArrowHeadHeight( Global.factoryEdgeAttributes.getArrowHeadHeight() );
        edgeThickness.setText( Global.factoryEdgeAttributes.getEdgeThickness() + "");
        Global.userEdgeAttributes.setEdgeThickness( Global.factoryEdgeAttributes.getEdgeThickness() );
        colorPanel.refreshSampleObject();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showGEdgeDisplayRect = new javax.swing.JCheckBox();
        showShadows = new javax.swing.JCheckBox();
        showBorders = new javax.swing.JCheckBox();
        wrapLabels = new javax.swing.JCheckBox();
        wrapColumns = new javax.swing.JTextField();
        showFooterOnPrint = new javax.swing.JCheckBox();
        contextCutPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        contextLabelList = new javax.swing.JComboBox();
        showCutOrnamented = new javax.swing.JCheckBox();
        contextBorderWidth = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fontPlaceholderPanel = new javax.swing.JPanel();
        colorPlaceholderPanel = new javax.swing.JPanel();
        edgePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        arrowHeadWidth = new javax.swing.JTextField();
        arrowHeadHeight = new javax.swing.JTextField();
        edgeThickness = new javax.swing.JTextField();
        restoreEdgeDefaults = new javax.swing.JButton();
        preferredEdgeLength = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(800, 200));
        setMinimumSize(new java.awt.Dimension(800, 200));
        setPreferredSize(new java.awt.Dimension(800, 200));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        showGEdgeDisplayRect.setBackground(new Color(255, 255, 255));
        showGEdgeDisplayRect.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
        showGEdgeDisplayRect.setSelected(Global.showGEdgeDisplayRect);
        showGEdgeDisplayRect.setText("Show edge selection handle");
        showGEdgeDisplayRect.setToolTipText("Display selection handle at edge midpoint (and enable edge deletion and text editing)");
        showGEdgeDisplayRect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                showGEdgeDisplayRectItemStateChanged(evt);
            }
        });

        showShadows.setBackground(new Color(255, 255, 255));
        showShadows.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
        showShadows.setSelected(Global.showShadows);
        showShadows.setText("Show \"shadows\" on nodes and contexts");
        showShadows.setToolTipText("Show a gray shadow for a 3-dimensional effect");
        showShadows.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                showShadowsItemStateChanged(evt);
            }
        });

        showBorders.setBackground(new Color(255, 255, 255));
        showBorders.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
        showBorders.setSelected(Global.showBorders);
        showBorders.setText("Show \"outline\" on nodes and contexts");
        showBorders.setToolTipText("Draw a border around every node (using text color)");
        showBorders.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                showBordersItemStateChanged(evt);
            }
        });

        wrapLabels.setBackground(new Color(255, 255, 255));
        wrapLabels.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
        wrapLabels.setSelected(GraphObject.defaultWrapLabels);
        wrapLabels.setText("Wrap labels at character pos:");
        wrapLabels.setToolTipText("Wrap text on labels after a given number of columns");
        wrapLabels.setOpaque(true);
        wrapLabels.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                wrapLabelsItemStateChanged(evt);
            }
        });

        wrapColumns.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        wrapColumns.setText("" + GraphObject.defaultWrapColumns);
        wrapColumns.setToolTipText("If enabled, wrap text on labels after this number of columns");
        wrapColumns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                wrapColumnsActionPerformed(evt);
            }
        });
        wrapColumns.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                wrapColumnsFocusLost(evt);
            }
        });

        showFooterOnPrint.setBackground(new Color(255, 255, 255));
        showFooterOnPrint.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
        showFooterOnPrint.setSelected(Global.showFooterOnPrint);
        showFooterOnPrint.setText("Show footer when printing");
        showFooterOnPrint.setToolTipText("Show a footer with the filename when printing");
        showFooterOnPrint.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                showFooterOnPrintItemStateChanged(evt);
            }
        });

        contextCutPanel.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
            "Contexts and \"Cuts\"", TitledBorder.LEFT,
            TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));

    jLabel1.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
    jLabel1.setText("Default context label");
    jLabel1.setToolTipText("Default label for new contexts and cuts");

    contextLabelList.setBackground(new Color(255, 255, 255));
    contextLabelList.setFont(new Font("Lucida Grande", 0, 10)); // NOI18N
    contextLabelList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Proposition", "Situation", "(none)" }));
    contextLabelList.setSelectedItem(Global.defaultContextLabel);
    contextLabelList.setToolTipText("Default label for new contexts and cuts");
    contextLabelList.setOpaque(true);
    contextLabelList.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            contextLabelListItemStateChanged(evt);
        }
    });

    showCutOrnamented.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
    showCutOrnamented.setSelected(true);
    showCutOrnamented.setText("Enhance display of each \"cut\"");
    showCutOrnamented.setToolTipText("Show ornaments to enhance cut readability");
    showCutOrnamented.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            showCutOrnamentedItemStateChanged(evt);
        }
    });

    contextBorderWidth.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    contextBorderWidth.setText("" + Graph.contextBorderWidth);
    contextBorderWidth.setToolTipText("Width in pixels of context or cut's enclosing border");
    contextBorderWidth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            contextBorderWidthActionPerformed(evt);
        }
    });
    contextBorderWidth.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            contextBorderWidthFocusLost(evt);
        }
    });

    jLabel2.setText("Border width:");
    jLabel2.setToolTipText("Width in pixels of context or cut's enclosing border");

    org.jdesktop.layout.GroupLayout contextCutPanelLayout = new org.jdesktop.layout.GroupLayout(contextCutPanel);
    contextCutPanel.setLayout(contextCutPanelLayout);
    contextCutPanelLayout.setHorizontalGroup(
        contextCutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(contextCutPanelLayout.createSequentialGroup()
            .add(contextCutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(contextCutPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(showCutOrnamented, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(contextCutPanelLayout.createSequentialGroup()
                    .add(21, 21, 21)
                    .add(jLabel2)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                    .add(contextBorderWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .add(contextCutPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(contextLabelList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(0, 0, Short.MAX_VALUE))
    );
    contextCutPanelLayout.setVerticalGroup(
        contextCutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(contextCutPanelLayout.createSequentialGroup()
            .add(0, 0, 0)
            .add(contextCutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel1)
                .add(contextLabelList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(0, 0, 0)
            .add(showCutOrnamented)
            .add(0, 0, 0)
            .add(contextCutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(contextBorderWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel2))
            .add(0, 0, Short.MAX_VALUE))
    );

    fontPlaceholderPanel.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
        "Current Font", TitledBorder.LEFT,
        TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));
fontPlaceholderPanel.setMaximumSize(new java.awt.Dimension(320, 150));
fontPlaceholderPanel.setMinimumSize(new java.awt.Dimension(320, 150));
fontPlaceholderPanel.setPreferredSize(new java.awt.Dimension(320, 150));

org.jdesktop.layout.GroupLayout fontPlaceholderPanelLayout = new org.jdesktop.layout.GroupLayout(fontPlaceholderPanel);
fontPlaceholderPanel.setLayout(fontPlaceholderPanelLayout);
fontPlaceholderPanelLayout.setHorizontalGroup(
    fontPlaceholderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
    .add(0, 0, Short.MAX_VALUE)
    );
    fontPlaceholderPanelLayout.setVerticalGroup(
        fontPlaceholderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(0, 150, Short.MAX_VALUE)
    );

    colorPlaceholderPanel.setPreferredSize(new java.awt.Dimension(320, 150));

    org.jdesktop.layout.GroupLayout colorPlaceholderPanelLayout = new org.jdesktop.layout.GroupLayout(colorPlaceholderPanel);
    colorPlaceholderPanel.setLayout(colorPlaceholderPanelLayout);
    colorPlaceholderPanelLayout.setHorizontalGroup(
        colorPlaceholderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(0, 320, Short.MAX_VALUE)
    );
    colorPlaceholderPanelLayout.setVerticalGroup(
        colorPlaceholderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(0, 150, Short.MAX_VALUE)
    );

    edgePanel.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
        "Lines and Arrowheads", TitledBorder.LEFT,
        TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));

jLabel3.setText("Arrowhead width");
jLabel3.setToolTipText("how \"spread out\" is each arrowhead");

jLabel4.setText("Arrowhead height");
jLabel4.setToolTipText("how \"deep\" is each arrowhead");

jLabel5.setText("Line thickness");
jLabel5.setToolTipText("How thick is each line between objects");

arrowHeadWidth.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
arrowHeadWidth.setText(Global.userEdgeAttributes.getArrowHeadWidth() + "");
arrowHeadWidth.setToolTipText("how \"spread out\" is each arrowhead");
arrowHeadWidth.setMinimumSize(new java.awt.Dimension(20, 28));
arrowHeadWidth.setPreferredSize(new java.awt.Dimension(70, 28));
arrowHeadWidth.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        arrowHeadWidthActionPerformed(evt);
    }
    });
    arrowHeadWidth.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            arrowHeadWidthFocusLost(evt);
        }
    });

    arrowHeadHeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    arrowHeadHeight.setText(Global.userEdgeAttributes.getArrowHeadHeight() + "");
    arrowHeadHeight.setToolTipText("how \"deep\" is each arrowhead");
    arrowHeadHeight.setMinimumSize(new java.awt.Dimension(20, 28));
    arrowHeadHeight.setPreferredSize(new java.awt.Dimension(70, 28));
    arrowHeadHeight.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            arrowHeadHeightActionPerformed(evt);
        }
    });
    arrowHeadHeight.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            arrowHeadHeightFocusLost(evt);
        }
    });

    edgeThickness.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    edgeThickness.setText(Global.userEdgeAttributes.getEdgeThickness() + "");
    edgeThickness.setToolTipText("How thick is each line between objects");
    edgeThickness.setMinimumSize(new java.awt.Dimension(20, 28));
    edgeThickness.setPreferredSize(new java.awt.Dimension(70, 28));
    edgeThickness.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            edgeThicknessActionPerformed(evt);
        }
    });
    edgeThickness.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            edgeThicknessFocusLost(evt);
        }
    });

    restoreEdgeDefaults.setFont(new Font("Lucida Grande", 1, 10)); // NOI18N
    restoreEdgeDefaults.setText("Factory defaults");
    restoreEdgeDefaults.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            restoreEdgeDefaultsActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout edgePanelLayout = new org.jdesktop.layout.GroupLayout(edgePanel);
    edgePanel.setLayout(edgePanelLayout);
    edgePanelLayout.setHorizontalGroup(
        edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(edgePanelLayout.createSequentialGroup()
            .add(15, 15, 15)
            .add(edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                .add(arrowHeadWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(arrowHeadHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(edgeThickness, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
        .add(org.jdesktop.layout.GroupLayout.TRAILING, edgePanelLayout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(restoreEdgeDefaults, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(67, 67, 67))
    );
    edgePanelLayout.setVerticalGroup(
        edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(edgePanelLayout.createSequentialGroup()
            .add(0, 0, 0)
            .add(edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel3)
                .add(arrowHeadWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(0, 0, 0)
            .add(edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel4)
                .add(arrowHeadHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(0, 0, 0)
            .add(edgePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(edgeThickness, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel5))
            .add(0, 0, Short.MAX_VALUE)
            .add(restoreEdgeDefaults))
    );

    preferredEdgeLength.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    preferredEdgeLength.setText("" + Global.preferredEdgeLength);
    preferredEdgeLength.setToolTipText("Preferred length for edges");
    preferredEdgeLength.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            preferredEdgeLengthActionPerformed(evt);
        }
    });
    preferredEdgeLength.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            preferredEdgeLengthFocusLost(evt);
        }
    });

    jLabel6.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel6.setText("Preferred edge length:");
    jLabel6.setToolTipText("Preferred length for edges");

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(15, 15, 15)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(showBorders, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(showGEdgeDisplayRect, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(showShadows, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(contextCutPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(edgePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 173, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(wrapLabels, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(preferredEdgeLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(wrapColumns, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(showFooterOnPrint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 264, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(66, 66, 66)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                .add(colorPlaceholderPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(fontPlaceholderPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(135, 135, 135))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(showGEdgeDisplayRect)
                    .add(4, 4, 4)
                    .add(showShadows)
                    .add(4, 4, 4)
                    .add(showBorders)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(wrapLabels)
                        .add(wrapColumns, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(0, 0, 0)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(preferredEdgeLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel6))
                    .add(0, 0, 0)
                    .add(showFooterOnPrint))
                .add(colorPlaceholderPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 26, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(fontPlaceholderPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(layout.createSequentialGroup()
                    .add(edgePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(12, 12, 12)
                    .add(contextCutPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 20, Short.MAX_VALUE))))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void showGEdgeDisplayRectItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_showGEdgeDisplayRectItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.showGEdgeDisplayRect = true;
        } else {
            Global.showGEdgeDisplayRect = false;
        }
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_showGEdgeDisplayRectItemStateChanged

    private void showShadowsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_showShadowsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.showShadows = true;
        } else {
            Global.showShadows = false;
        }
        if ( Global.showShadows ) {
            Graph.contextInnerPadding = Graph.contextBorderWidth + 4;
        } else {
            Graph.contextInnerPadding = Graph.contextBorderWidth + 2;
        }
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_showShadowsItemStateChanged

    private void showBordersItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_showBordersItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.showBorders = true;
        } else {
            Global.showBorders = false;
        }
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_showBordersItemStateChanged

    private void wrapLabelsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_wrapLabelsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            GraphObject.defaultWrapLabels = true;
            wrapColumns.setEnabled( true );
        } else {
            GraphObject.defaultWrapLabels = false;
            wrapColumns.setEnabled( false );
        }
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_wrapLabelsItemStateChanged

    private void wrapColumnsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_wrapColumnsActionPerformed
        int inputValue = PreferencesFrame.getNonNegativeIntFromField( wrapColumns, GraphObject.defaultWrapColumns );
        if ( inputValue > 0 ) {
            GraphObject.defaultWrapColumns = inputValue;
        } else {
            wrapColumns.setText( GraphObject.defaultWrapColumns + "" );
        }
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_wrapColumnsActionPerformed

    private void showFooterOnPrintItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_showFooterOnPrintItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.showFooterOnPrint = true;
        } else {
            Global.showFooterOnPrint = false;
        }
    }//GEN-LAST:event_showFooterOnPrintItemStateChanged

    private void contextLabelListItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_contextLabelListItemStateChanged
        Global.defaultContextLabel = (String)( contextLabelList.getSelectedItem() );
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_contextLabelListItemStateChanged

    private void showCutOrnamentedItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_showCutOrnamentedItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.showCutOrnamented = true;
        } else {
            Global.showCutOrnamented = false;
        }
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_showCutOrnamentedItemStateChanged

    private void contextBorderWidthActionPerformed(ActionEvent evt) {//GEN-FIRST:event_contextBorderWidthActionPerformed
        Graph.contextBorderWidth = PreferencesFrame.getNonNegativeIntFromField( contextBorderWidth, Graph.contextBorderWidth );
        if ( Global.showShadows ) {
            Graph.contextInnerPadding = Graph.contextBorderWidth + 4;
        } else {
            Graph.contextInnerPadding = Graph.contextBorderWidth + 2;
        }
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_contextBorderWidthActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_formComponentShown

    private void arrowHeadWidthActionPerformed(ActionEvent evt) {//GEN-FIRST:event_arrowHeadWidthActionPerformed
        Global.userEdgeAttributes.setArrowHeadWidth(
                PreferencesFrame.getNonNegativeIntFromField( arrowHeadWidth, Global.userEdgeAttributes.getArrowHeadWidth() ) );
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_arrowHeadWidthActionPerformed

    private void arrowHeadHeightActionPerformed(ActionEvent evt) {//GEN-FIRST:event_arrowHeadHeightActionPerformed
        Global.userEdgeAttributes.setArrowHeadHeight(
                PreferencesFrame.getNonNegativeIntFromField( arrowHeadHeight, Global.userEdgeAttributes.getArrowHeadHeight() ) );
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_arrowHeadHeightActionPerformed

    private void edgeThicknessActionPerformed(ActionEvent evt) {//GEN-FIRST:event_edgeThicknessActionPerformed
        Global.userEdgeAttributes.setEdgeThickness(
                PreferencesFrame.getNonNegativeDoubleFromField( edgeThickness, Global.userEdgeAttributes.getEdgeThickness() ) );
        colorPanel.refreshSampleObject();
    }//GEN-LAST:event_edgeThicknessActionPerformed

    private void arrowHeadWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_arrowHeadWidthFocusLost
        arrowHeadWidthActionPerformed( new ActionEvent(this, 0, null));
    }//GEN-LAST:event_arrowHeadWidthFocusLost

    private void arrowHeadHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_arrowHeadHeightFocusLost
        arrowHeadHeightActionPerformed( new ActionEvent(this, 0, null));
    }//GEN-LAST:event_arrowHeadHeightFocusLost

    private void edgeThicknessFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edgeThicknessFocusLost
        edgeThicknessActionPerformed( new ActionEvent(this, 0, null));
    }//GEN-LAST:event_edgeThicknessFocusLost

    private void restoreEdgeDefaultsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_restoreEdgeDefaultsActionPerformed
        restoreEdgeFactoryDefaults();
    }//GEN-LAST:event_restoreEdgeDefaultsActionPerformed

    private void wrapColumnsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wrapColumnsFocusLost
        wrapColumnsActionPerformed( new ActionEvent(this, 0, null));
    }//GEN-LAST:event_wrapColumnsFocusLost

    private void contextBorderWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contextBorderWidthFocusLost
        contextBorderWidthActionPerformed( new ActionEvent(this, 0, null));
    }//GEN-LAST:event_contextBorderWidthFocusLost

    private void preferredEdgeLengthActionPerformed(ActionEvent evt) {//GEN-FIRST:event_preferredEdgeLengthActionPerformed
        double inputValue = PreferencesFrame.getNonNegativeDoubleFromField( preferredEdgeLength, Global.preferredEdgeLength );
        if ( inputValue > 0 ) {
            Global.preferredEdgeLength = inputValue;
        } else {
            preferredEdgeLength.setText( Global.preferredEdgeLength + "" );
        }
    }//GEN-LAST:event_preferredEdgeLengthActionPerformed

    private void preferredEdgeLengthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_preferredEdgeLengthFocusLost
        preferredEdgeLengthActionPerformed( new ActionEvent(this, 0, null));
    }//GEN-LAST:event_preferredEdgeLengthFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField arrowHeadHeight;
    public javax.swing.JTextField arrowHeadWidth;
    private javax.swing.JPanel colorPlaceholderPanel;
    public javax.swing.JTextField contextBorderWidth;
    private javax.swing.JPanel contextCutPanel;
    public javax.swing.JComboBox contextLabelList;
    private javax.swing.JPanel edgePanel;
    public javax.swing.JTextField edgeThickness;
    private javax.swing.JPanel fontPlaceholderPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JTextField preferredEdgeLength;
    private javax.swing.JButton restoreEdgeDefaults;
    public javax.swing.JCheckBox showBorders;
    public javax.swing.JCheckBox showCutOrnamented;
    public javax.swing.JCheckBox showFooterOnPrint;
    public javax.swing.JCheckBox showGEdgeDisplayRect;
    public javax.swing.JCheckBox showShadows;
    public javax.swing.JTextField wrapColumns;
    public javax.swing.JCheckBox wrapLabels;
    // End of variables declaration//GEN-END:variables
}
