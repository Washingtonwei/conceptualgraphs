/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package charger.prefs;

import charger.Global;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import kb.KnowledgeManager;

/**
 *
 * @author hsd
 */
public class CompatibilityPrefPanel extends javax.swing.JPanel  {

     int matchingStrategyDisplayWidth = 280;
    
    
    /**
     * Creates new form CompatibilityPrefPanel
     */
    public CompatibilityPrefPanel() {
        initComponents();
        matchingStrategyDisplayWidth = matchingStrategyExplanation.getWidth() - 20;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GraphFolderField = new javax.swing.JTextField();
        setGraphFolder = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        wordnetDictField = new javax.swing.JTextField();
        setDictFolder = new javax.swing.JButton();
        wordnetEnabled = new javax.swing.JCheckBox();
        wordnetLicense = new javax.swing.JButton();
        enforceStandardRelations = new javax.swing.JCheckBox();
        matchingStrategyList = new javax.swing.JComboBox();
        matchingStrategyExplanationScroller = new javax.swing.JScrollPane();
        matchingStrategyExplanation = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        includeCharGerInfoInCGIF = new javax.swing.JCheckBox();
        exportSubtypesAsRelations = new javax.swing.JCheckBox();
        importSubtypeRelationsAsHierarchy = new javax.swing.JCheckBox();

        setBackground(new Color(255, 255, 255));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        GraphFolderField.setFont(new Font("Lucida Grande", 0, 14)); // NOI18N
        GraphFolderField.setText(Global.GraphFolderFile.getAbsolutePath());
        GraphFolderField.setToolTipText("Folder where graph files (*cgx) are looked for");
        GraphFolderField.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
            "Graphs Folder", TitledBorder.LEFT,
            TitledBorder.TOP, new Font( "Dialog", Font.BOLD + Font.ITALIC, 12 ), Color.black ));
    GraphFolderField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            GraphFolderFieldActionPerformed(evt);
        }
    });

    setGraphFolder.setText("Browse...");
    setGraphFolder.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            setGraphFolderActionPerformed(evt);
        }
    });

    jPanel1.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
        "Wordnet and Glossary", TitledBorder.LEFT,
        TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));

wordnetDictField.setFont(new Font("Lucida Grande", 0, 14)); // NOI18N
wordnetDictField.setText(charger.gloss.wn.WordnetManager.wordnetDictionaryFilename);
wordnetDictField.setToolTipText("Enclosing folder for Wordnet's dictionary (usually named \"dict\")");
wordnetDictField.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
    "Wordnet dict folder", TitledBorder.LEFT,
    TitledBorder.TOP, new Font( "Dialog", Font.BOLD + Font.ITALIC, 12 ), Color.black ));
    wordnetDictField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            wordnetDictFieldActionPerformed(evt);
        }
    });

    setDictFolder.setText("Browse...");
    setDictFolder.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            setDictFolderActionPerformed(evt);
        }
    });

    wordnetEnabled.setSelected(Global.wordnetEnabled);
    wordnetEnabled.setText("Enable label glossary and Wordnet");
    wordnetEnabled.setToolTipText("Controls whether to bother with type label glossary definitions and Wordnet");
    wordnetEnabled.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            wordnetEnabledItemStateChanged(evt);
        }
    });

    wordnetLicense.setFont(new Font("Arial", 0, 12)); // NOI18N
    wordnetLicense.setText("View Wordnet license and copyright");
    wordnetLicense.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            wordnetLicenseActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(30, 30, 30)
                    .add(wordnetEnabled)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(wordnetLicense, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 252, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel1Layout.createSequentialGroup()
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(wordnetDictField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 554, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(setDictFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(43, 43, 43))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap(18, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(wordnetEnabled)
                .add(wordnetLicense))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(wordnetDictField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(setDictFolder))
            .add(20, 20, 20))
    );

    enforceStandardRelations.setBackground(new Color(255, 255, 255));
    enforceStandardRelations.setSelected(Global.enforceStandardRelations);
    enforceStandardRelations.setText("Enforce standard relation arguments");
    enforceStandardRelations.setToolTipText("Enforce standard relation rule to have at most one output concept (excludes actors)");
    enforceStandardRelations.setOpaque(true);
    enforceStandardRelations.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            enforceStandardRelationsItemStateChanged(evt);
        }
    });

    matchingStrategyList.setBackground(new Color(255, 255, 255));
    matchingStrategyList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BasicTupleMatcher", "mm.MMExptTupleMatcher", "CustomExpt1TupleMatcher" }));
    matchingStrategyList.setToolTipText("Matcher for binary relation matching operation");
    matchingStrategyList.setOpaque(true);
    matchingStrategyList.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            matchingStrategyListItemStateChanged(evt);
        }
    });

    matchingStrategyExplanationScroller.setToolTipText("Explanation for matcher's rules");

    matchingStrategyExplanation.setContentType("text/html"); // NOI18N
    matchingStrategyExplanation.setText("<font face=\"sans-serif\" size=\"-2\">\n"
        + "<TABLE><TR><TD>\n"
        + Global.knowledgeManager.createCurrentTupleMatcher().explainYourself() + "</TABLE>\n");
    matchingStrategyExplanationScroller.setViewportView(matchingStrategyExplanation);

    jLabel1.setText("Matching strategy:");

    jPanel2.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
        "CGIF (2007) Support", TitledBorder.LEFT,
        TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));

includeCharGerInfoInCGIF.setSelected(Global.includeCharGerInfoInCGIF);
includeCharGerInfoInCGIF.setText("Export CharGer layout as comments");
includeCharGerInfoInCGIF.setToolTipText("Put CharGer's layout in CGIF comments starting with \"" + Global.CharGerCGIFCommentStart + "\"");
includeCharGerInfoInCGIF.setOpaque(true);
includeCharGerInfoInCGIF.addItemListener(new java.awt.event.ItemListener() {
    public void itemStateChanged(ItemEvent evt) {
        includeCharGerInfoInCGIFItemStateChanged(evt);
    }
    });

    exportSubtypesAsRelations.setSelected(Global.exportSubtypesAsRelations);
    exportSubtypesAsRelations.setText("Export subtypes as relations");
    exportSubtypesAsRelations.setToolTipText("Put CharGer's layout in CGIF comments starting with \"" + Global.CharGerCGIFCommentStart + "\"");
    exportSubtypesAsRelations.setOpaque(true);
    exportSubtypesAsRelations.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            exportSubtypesAsRelationsItemStateChanged(evt);
        }
    });
    exportSubtypesAsRelations.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exportSubtypesAsRelationsActionPerformed(evt);
        }
    });

    importSubtypeRelationsAsHierarchy.setSelected(Global.exportSubtypesAsRelations);
    importSubtypeRelationsAsHierarchy.setText("Import subtype relations as hierarchy");
    importSubtypeRelationsAsHierarchy.setToolTipText("Whether to treat [Type] concepts and (subtype) relations as special type hierarchy denotations or not.");
    importSubtypeRelationsAsHierarchy.setEnabled(false);
    importSubtypeRelationsAsHierarchy.setOpaque(true);
    importSubtypeRelationsAsHierarchy.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            importSubtypeRelationsAsHierarchyItemStateChanged(evt);
        }
    });
    importSubtypeRelationsAsHierarchy.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            importSubtypeRelationsAsHierarchyActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .add(19, 19, 19)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                .add(importSubtypeRelationsAsHierarchy, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(exportSubtypesAsRelations, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(includeCharGerInfoInCGIF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(87, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .add(14, 14, 14)
            .add(includeCharGerInfoInCGIF)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(exportSubtypesAsRelations)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(importSubtypeRelationsAsHierarchy)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(110, 110, 110)
                    .add(jLabel1))
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(matchingStrategyList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createSequentialGroup()
                    .add(16, 16, 16)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(18, 18, 18)
                            .add(enforceStandardRelations))
                        .add(layout.createSequentialGroup()
                            .add(GraphFolderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 581, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(setGraphFolder))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(matchingStrategyExplanationScroller, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 416, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 684, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap(33, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(GraphFolderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(setGraphFolder))
            .add(2, 2, 2)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(53, 53, 53)
                    .add(enforceStandardRelations))
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(31, 31, 31)
                    .add(jLabel1)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(matchingStrategyList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(matchingStrategyExplanationScroller, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(86, 86, 86))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void GraphFolderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraphFolderFieldActionPerformed
        Global.GraphFolder = GraphFolderField.getText();
//            Global.GraphFolderFile = new File( Global.GraphFolder );
        Global.setGraphFolder( Global.GraphFolder, true );
    }//GEN-LAST:event_GraphFolderFieldActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        GraphFolderField.setText( Global.GraphFolderFile.getAbsolutePath() );
    }//GEN-LAST:event_formComponentShown

    private void setDictFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDictFolderActionPerformed
        charger.gloss.wn.WNUtil.queryForDictFolder( null );
        wordnetDictField.setText( charger.gloss.wn.WordnetManager.wordnetDictionaryFilename );
    }//GEN-LAST:event_setDictFolderActionPerformed

    private void setGraphFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setGraphFolderActionPerformed
        Global.queryForGraphFolder( null );
        GraphFolderField.setText( Global.GraphFolderFile.getAbsolutePath() );
    }//GEN-LAST:event_setGraphFolderActionPerformed

    private void wordnetEnabledItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_wordnetEnabledItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.wordnetEnabled = true;
        } else {
            Global.wordnetEnabled = false;
        }
    }//GEN-LAST:event_wordnetEnabledItemStateChanged

    private void enforceStandardRelationsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_enforceStandardRelationsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.enforceStandardRelations = true;
        } else {
            Global.enforceStandardRelations = false;
        }
    }//GEN-LAST:event_enforceStandardRelationsItemStateChanged

    private void matchingStrategyListItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_matchingStrategyListItemStateChanged
        charger.Global.matchingStrategy = (String)( matchingStrategyList.getSelectedItem() );
        KnowledgeManager km = Global.knowledgeManager;
        matchingStrategyExplanation.setText( "<font face=\"sans-serif\" size=\"-2\">\n"
//                + "<TABLE width=\"" + matchingStrategyDisplayWidth + "\"><TR><TD>\n"
                + "<TABLE ><TR><TD>\n"
                + Global.knowledgeManager.createCurrentTupleMatcher().explainYourself() + "</TABLE>\n" );
        matchingStrategyExplanationScroller.getViewport().setViewPosition( new Point( 0, 0 ) );

    }//GEN-LAST:event_matchingStrategyListItemStateChanged

    private void includeCharGerInfoInCGIFItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_includeCharGerInfoInCGIFItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.includeCharGerInfoInCGIF = true;
        } else {
            Global.includeCharGerInfoInCGIF = false;
        }
    }//GEN-LAST:event_includeCharGerInfoInCGIFItemStateChanged

    private void wordnetDictFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordnetDictFieldActionPerformed
         charger.gloss.wn.WordnetManager.wordnetDictionaryFilename = wordnetDictField.getText();
    }//GEN-LAST:event_wordnetDictFieldActionPerformed

    private void exportSubtypesAsRelationsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_exportSubtypesAsRelationsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.exportSubtypesAsRelations = true;
        } else {
            Global.exportSubtypesAsRelations = false;
        }
    }//GEN-LAST:event_exportSubtypesAsRelationsItemStateChanged

    private void exportSubtypesAsRelationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSubtypesAsRelationsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportSubtypesAsRelationsActionPerformed

    private void importSubtypeRelationsAsHierarchyItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_importSubtypeRelationsAsHierarchyItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.importSubtypeRelationsAsHierarchy = true;
        } else {
            Global.importSubtypeRelationsAsHierarchy = false;
        }
    }//GEN-LAST:event_importSubtypeRelationsAsHierarchyItemStateChanged

    private void importSubtypeRelationsAsHierarchyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSubtypeRelationsAsHierarchyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_importSubtypeRelationsAsHierarchyActionPerformed

    private void wordnetLicenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordnetLicenseActionPerformed
             try {
                 Desktop.getDesktop().browse( new java.net.URI( "http://wordnet.princeton.edu/wordnet/license/" ) );
             } catch ( URISyntaxException ex ) {
                 Logger.getLogger( CompatibilityPrefPanel.class.getName() ).log( Level.SEVERE, null, ex );
             }  catch ( IOException ex ) {
             JOptionPane.showMessageDialog( wordnetLicense, "Couldn't open browser. "
                     + ex.getMessage() + "\nUse this link: http://wordnet.princeton.edu/wordnet/license/.");
         }
    }//GEN-LAST:event_wordnetLicenseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField GraphFolderField;
    public javax.swing.JCheckBox enforceStandardRelations;
    public javax.swing.JCheckBox exportSubtypesAsRelations;
    public javax.swing.JCheckBox importSubtypeRelationsAsHierarchy;
    public javax.swing.JCheckBox includeCharGerInfoInCGIF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JEditorPane matchingStrategyExplanation;
    private javax.swing.JScrollPane matchingStrategyExplanationScroller;
    public javax.swing.JComboBox matchingStrategyList;
    private javax.swing.JButton setDictFolder;
    private javax.swing.JButton setGraphFolder;
    public javax.swing.JTextField wordnetDictField;
    public javax.swing.JCheckBox wordnetEnabled;
    public javax.swing.JButton wordnetLicense;
    // End of variables declaration//GEN-END:variables
}
