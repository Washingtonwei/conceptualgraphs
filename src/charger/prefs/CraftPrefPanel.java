/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package charger.prefs;

import charger.Global;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.File;
import javax.swing.BorderFactory;
import javax.swing.border.TitledBorder;

/**
 *
 * @author hsd
 */
public class CraftPrefPanel extends javax.swing.JPanel {

    /**
     * Creates new form CraftPrefPanel
     */
    public CraftPrefPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gridFolderField = new javax.swing.JTextField();
        setGridFolder = new javax.swing.JButton();
        tryGenericSenseInRepGrid = new javax.swing.JCheckBox();
        useOnlyBinaryRelationsinCraft = new javax.swing.JCheckBox();
        useOnlyGenericConceptsinCraft = new javax.swing.JCheckBox();

        gridFolderField.setText(Global.CRAFTGridFolderFile.getAbsolutePath() + File.separator);
        gridFolderField.setToolTipText("The folder where CRAFT's repertory grids are stored (*.rgxml)");
        gridFolderField.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
            "RepertoryGrid Folder", TitledBorder.LEFT,
            TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));

    setGridFolder.setText("Browse...");
    setGridFolder.setToolTipText("Click here to choose another repertory grid folder");
    setGridFolder.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            setGridFolderActionPerformed(evt);
        }
    });

    tryGenericSenseInRepGrid.setBackground(new Color(255, 255, 255));
    tryGenericSenseInRepGrid.setSelected(Global.CRAFTuseOnlyBinaryRelationsinCraft);
    tryGenericSenseInRepGrid.setText("Ask for free form definitions in repertory grids");
    tryGenericSenseInRepGrid.setToolTipText("Whether to ask for free form definitions in rep grids");
    tryGenericSenseInRepGrid.setOpaque(true);
    tryGenericSenseInRepGrid.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            tryGenericSenseInRepGridItemStateChanged(evt);
        }
    });

    useOnlyBinaryRelationsinCraft.setBackground(new Color(255, 255, 255));
    useOnlyBinaryRelationsinCraft.setSelected(Global.CRAFTuseOnlyBinaryRelationsinCraft);
    useOnlyBinaryRelationsinCraft.setText("Use only binary relations for acquisition");
    useOnlyBinaryRelationsinCraft.setToolTipText("Whether to use only binary relations or ignore valence of relation");
    useOnlyBinaryRelationsinCraft.setOpaque(true);
    useOnlyBinaryRelationsinCraft.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            useOnlyBinaryRelationsinCraftItemStateChanged(evt);
        }
    });

    useOnlyGenericConceptsinCraft.setBackground(new Color(255, 255, 255));
    useOnlyGenericConceptsinCraft.setSelected(Global.CRAFTuseOnlyGenericConceptsinCraft);
    useOnlyGenericConceptsinCraft.setText("Use only generic concepts for acquisition");
    useOnlyGenericConceptsinCraft.setToolTipText("Whether to use only generic concepts (i.e., skip concepts with referents)");
    useOnlyGenericConceptsinCraft.setOpaque(true);
    useOnlyGenericConceptsinCraft.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            useOnlyGenericConceptsinCraftItemStateChanged(evt);
        }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(17, 17, 17)
                    .add(gridFolderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 617, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(setGridFolder))
                .add(layout.createSequentialGroup()
                    .add(28, 28, 28)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(tryGenericSenseInRepGrid)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, useOnlyBinaryRelationsinCraft)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, useOnlyGenericConceptsinCraft))))
            .addContainerGap(48, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(25, 25, 25)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                .add(layout.createSequentialGroup()
                    .add(1, 1, 1)
                    .add(gridFolderField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .add(setGridFolder))
            .add(18, 18, 18)
            .add(tryGenericSenseInRepGrid)
            .add(18, 18, 18)
            .add(useOnlyBinaryRelationsinCraft)
            .add(18, 18, 18)
            .add(useOnlyGenericConceptsinCraft)
            .addContainerGap(317, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void setGridFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setGridFolderActionPerformed
        Global.craftModule.queryForGridFolder( null );
        gridFolderField.setText( Global.CRAFTGridFolderFile.getAbsolutePath() );
    }//GEN-LAST:event_setGridFolderActionPerformed

    private void useOnlyBinaryRelationsinCraftItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_useOnlyBinaryRelationsinCraftItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.CRAFTuseOnlyBinaryRelationsinCraft = true;
        } else {
            Global.CRAFTuseOnlyBinaryRelationsinCraft = false;
        }
    }//GEN-LAST:event_useOnlyBinaryRelationsinCraftItemStateChanged

    private void useOnlyGenericConceptsinCraftItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_useOnlyGenericConceptsinCraftItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.CRAFTtryGenericSenseInRepGrid = true;
        } else {
            Global.CRAFTtryGenericSenseInRepGrid = false;
        }
    }//GEN-LAST:event_useOnlyGenericConceptsinCraftItemStateChanged

    private void tryGenericSenseInRepGridItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_tryGenericSenseInRepGridItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.CRAFTuseOnlyGenericConceptsinCraft = true;
        } else {
            Global.CRAFTuseOnlyGenericConceptsinCraft = false;
        }
    }//GEN-LAST:event_tryGenericSenseInRepGridItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField gridFolderField;
    private javax.swing.JButton setGridFolder;
    public javax.swing.JCheckBox tryGenericSenseInRepGrid;
    public javax.swing.JCheckBox useOnlyBinaryRelationsinCraft;
    public javax.swing.JCheckBox useOnlyGenericConceptsinCraft;
    // End of variables declaration//GEN-END:variables
}
