/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package charger.prefs;

import charger.Global;
import charger.util.FontChooser;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import javax.swing.BorderFactory;
import javax.swing.border.TitledBorder;

/**
 *
 * @author hsd
 */
public class FontPrefPanel extends javax.swing.JPanel {

    PreferencesFrame frame = null;
    
    FontChooser fontChooser = null;
    /**
     * Creates new form FontPrefPanel
     */
    public FontPrefPanel(PreferencesFrame frame  ) {
        this.frame = frame;
        initComponents();
    }
    
        public PreferencesFrame getParentFrame() {
        return frame;
    }
    
    public FontChooser getFontChooser() {
        return fontChooser;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fontSample = new javax.swing.JLabel();
        changeFont = new javax.swing.JButton();
        showAllFonts = new javax.swing.JCheckBox();

        setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
            "Default Font", TitledBorder.LEFT,
            TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 11 ), Color.black ));

    fontSample.setBackground(new Color(255, 255, 255));
    fontSample.setText(FontChooser.getFontString( Global.defaultFont));
    fontSample.setToolTipText("Font currently selected for displaying graphs");
    fontSample.setBorder(BorderFactory.createTitledBorder( Global.BeveledBorder,
        "Font Sample", TitledBorder.LEFT,
        TitledBorder.TOP, new Font( "SansSerif", Font.BOLD + Font.ITALIC, 10 ), Color.black ));
fontSample.setOpaque(true);

changeFont.setText("Change Font");
changeFont.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        changeFontActionPerformed(evt);
    }
    });

    showAllFonts.setFont(new Font("Lucida Grande", 0, 12)); // NOI18N
    showAllFonts.setText("Include all system fonts");
    showAllFonts.setToolTipText("Whether to include system-dependent fonts that reside locally (possibly non-portable)");
    showAllFonts.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(ItemEvent evt) {
            showAllFontsItemStateChanged(evt);
        }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(12, 12, 12)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(layout.createSequentialGroup()
                    .add(fontSample, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 288, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE))
                .add(layout.createSequentialGroup()
                    .add(changeFont)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(showAllFonts, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .add(12, 12, 12))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(13, 13, 13)
            .add(fontSample, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
            .add(18, 18, 18)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(changeFont)
                .add(showAllFonts))
            .add(13, 13, 13))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void changeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFontActionPerformed
        fontChooser = new FontChooser( getParentFrame(), true, Global.defaultFont, "Set the default font for all open and future graphs", showAllFonts.isSelected());
        Font newFont = fontChooser.getTheFont();
        if ( newFont != null ) {
            Global.defaultFont = new Font( newFont.getName(), newFont.getStyle(), newFont.getSize());
            //            Global.defaultLogicalFontName = fontChooser.getLogicalFontName();
            fontSample.setFont( Global.defaultFont );
            fontSample.setText( FontChooser.getFontString( Global.defaultFont )) ;
            getParentFrame().fontChanged();
        }
    }//GEN-LAST:event_changeFontActionPerformed

    private void showAllFontsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_showAllFontsItemStateChanged
        if ( evt.getStateChange() == ItemEvent.SELECTED ) {
            Global.showAllFonts = true;
        } else {
            Global.showAllFonts = false;
        }
    }//GEN-LAST:event_showAllFontsItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeFont;
    private javax.swing.JLabel fontSample;
    public javax.swing.JCheckBox showAllFonts;
    // End of variables declaration//GEN-END:variables
}
