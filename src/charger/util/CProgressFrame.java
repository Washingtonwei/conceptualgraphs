/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package charger.util;

import charger.Global;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;

/**
 * A progress bar with a label, intended to be used by a SwingWorker.
 * Becomes visible when SwingWorker starts, hides when SwingWorker is done.
 * Responds to two properties changing: 
 * <dl><dt>"label"</dt><dd>The label to be displayed</dd>
 * <dt>"progress"</dt><dd>The progress value to be displayed. Scaling of these values
 * is the responsibility of the caller or event creator.</dd>
 * </dl>
 * Here is an outline of how it might typically be used. Note that disabling/enabling 
 * any parent frame is up to the programmer.
 * <pre>
 * 
 * public class SwingWorkerSample extends SwingWorker&lt;Void, Void>&gt; {

        public SwingWorkerSample( ... ) {
        }

        &#64;Override
        public Void doInBackground() {
            for ( ... ) {
                firePropertyChange( "progress", progress++, progress );   // note the two values must be different
                firePropertyChange( "label", null,
                            "whatever you want the label to say at this iteration" );
            }
            return null;
        }

        &#64;Override
        protected void done() {
        }
    }
	
    CProgressFrame progressframe = new CProgressFrame( ... parent frame ... );  // or null argument
    int progress = 0;
        SwingWorkerSample sampleTask = new SwingWorkerSample( "constructor args" );
        sampleTask.addPropertyChangeListener( progressframe );
        sampleTask.execute();

</pre>
 * @author hsd
 */
public class CProgressFrame extends JFrame implements PropertyChangeListener {

    JFrame parent = null;

    public CProgressFrame( JFrame p ) {
        initComponents();
        this.parent = p;
        this.getContentPane().setBackground( charger.Global.chargerBlueColor );
    }
    
    @Override
    public void propertyChange( PropertyChangeEvent evt ) {
        if ( evt.getPropertyName().equals( "progress")) {
            progressBar.setValue( ((Integer)evt.getNewValue()).intValue() );
        } else if ( evt.getPropertyName().equals( "label") ) {
            progressLabel.setText( (String)evt.getNewValue() );
        } else if ( evt.getPropertyName().equals( "state") ) {
            if ( evt.getNewValue() == javax.swing.SwingWorker.StateValue.STARTED ) {
                this.setVisible( true );
            } else if ( evt.getNewValue() == javax.swing.SwingWorker.StateValue.DONE ) {
                this.setVisible( false );
                this.dispose();
            }
        }
    }
    
    /**
     * Set the value to indicate how much progress is made.
     * @param value Should be between minimum value and maximum value
     */
    public void setValue( int value ) {
        progressBar.setValue( value );
    }
    
    /**
     * Set the descriptive label that appears above the progress bar. 
     * Can be changed while progressing.
     * @param label 
     */
    public void setLabel( String label ) {
        progressLabel.setText( label );
    }
    
    public void setMinimum( int value ) {
        progressBar.setMinimum(  value );
    }

    public void setMaximum( int value ) {
        progressBar.setMaximum(  value );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Progress Bar");
        setBackground(charger.Global.chargerBlueColor);
        setLocation(new java.awt.Point(200, 200));

        progressBar.setBackground(charger.Global.chargerBlueColor);
        progressBar.setOpaque(true);
        progressBar.setStringPainted(true);

        progressLabel.setBackground(charger.Global.chargerBlueColor);
        progressLabel.setForeground(new java.awt.Color(255, 255, 255));
        progressLabel.setText("jLabel1");
        progressLabel.setOpaque(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(38, 38, 38)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 422, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(progressLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 565, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(progressLabel)
                .add(18, 18, 18)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JProgressBar progressBar;
    public javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables
}
